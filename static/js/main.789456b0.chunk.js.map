{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","components/About.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","_useState","useState","_useState2","Object","slicedToArray","colorMode","setColorMode","_useState3","_useState4","clrSelectorTxt","setClrSelectorTxt","react_default","a","createElement","className","concat","mode","dist","to","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","aboutText","style","display","color","htmlFor","value","onChange","event","target","aria-checked","toggleMode","document","getElementById","role","buttonText","TextForm","text","setText","wordcheck","wordArr","split","length","charAt","Fragment","heading","placeholder","backgroundColor","rows","disabled","onClick","newText","toUpperCase","showAlert","toLowerCase","arr","i","slice","console","log","finalStr","join","select","navigator","clipboard","writeText","propsType","PropTypes","string","isRequired","Alert","height","alert","xmlns","viewBox","d","msg","About","myStyle","aria-labelledby","data-bs-parent","App","setMode","btnText","setBtnText","_useState5","_useState6","setAlert","message","setTimeout","body","components_Alert","react_router_dist","path","element","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.789456b0.chunk.js","sourcesContent":["import React, {useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from 'react-router-dom'\r\n\r\nexport default function Navbar(props) {\r\n  \r\n  const [colorMode, setColorMode] = useState(\"#000000\")\r\n\r\n  const [clrSelectorTxt, setClrSelectorTxt] = useState('black')\r\n\r\n  const colorpicker = () => {\r\n    if(props.mode === 'dark'){\r\n      setClrSelectorTxt('black')\r\n      document.getElementById('colorselector').style.display = 'flex'\r\n      setColorMode('#000000')\r\n    }\r\n    else{\r\n      // setClrSelectorTxt('white')\r\n      document.getElementById('colorselector').style.display = 'none'\r\n    }\r\n  }\r\n  const handleColor = (event) =>{\r\n    setColorMode(event.target.value);\r\n  }\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n      <div className=\"container-fluid\">\r\n        <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link>\r\n        {/* <a className=\"navbar-brand\" href=\"/\">{props.title}</a> */}\r\n        <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link>\r\n              {/* <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">Home</a> */}\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <Link className=\"nav-link\" to=\"/about\">{props.aboutText}</Link>\r\n              {/* <a className=\"nav-link\" href=\"/about\">{props.aboutText}</a> */}\r\n            </li>\r\n          </ul>\r\n          {/* <form className=\"d-flex\" role=\"search\">\r\n          <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n          <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n        </form> */}\r\n          <div className='mx-2' id='colorselector' style={{display:'flex'}}>\r\n            <label className=\"form-check-label mx-2\" style={{color : clrSelectorTxt}} htmlFor='DarkModeColor'>Select Dark mode Color</label>\r\n            <input type=\"color\" id=\"modeColor\" value={colorMode} onChange={handleColor} />\r\n            {/* <input type=\"button\" className=\"btn btn-primary\" value=\"Click\" /> */}\r\n          </div>\r\n          <div className={`form-check form-switch my-3 text-${props.mode === 'light' ? 'dark' : 'light'}`}>\r\n            <input className=\"form-check-input\" aria-checked onChange={() =>{ props.toggleMode(); colorpicker(); }} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\" />\r\n            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">{props.buttonText}</label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  )\r\n}\r\n\r\n// Navbar.propTypes = {\r\n//     title : PropTypes.string,\r\n//     aboutText : PropTypes.string\r\n// }\r\n\r\n// Sets default values of props if nothing is passed\r\n// Navbar.defaultProps = {\r\n//     title : \"Title\",\r\n//     aboutText : \"About\"\r\n// }\r\n\r\n// Checks the value of props is not blank\r\nNavbar.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  aboutText: PropTypes.string.isRequired\r\n}\r\n","import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport default function TextForm(props) {\r\n\r\n\r\n    const [text, setText] = useState('');\r\n    // text = \"any text\"; We cannot assign text directly\r\n    // setText(\"any text\"); Correct way to set text\r\n\r\n\r\n\r\n\r\n    const handleUpClick = () => {\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to Uppercase\", \"success\")\r\n    }\r\n\r\n    const handleLowClick = () => {\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to Lowercase\", \"success\")\r\n    }\r\n\r\n    const handleSentClick = () => {\r\n        // let newText = text.lastIndexOf(\".\");\r\n        // console.log(newText);\r\n        const arr = text.split(\".\");\r\n        // console.log(arr);\r\n        // const trimmedarr = arr.map(element => {\r\n        //     return element.trim();\r\n        // });\r\n\r\n        // console.log(trimmedarr);\r\n\r\n        for (let i = 0; i < arr.length; i++) {\r\n            arr[i] = arr[i].charAt(0).toUpperCase() + arr[i].slice(1);\r\n            console.log(arr[i]);\r\n            // if (arr[i].charAt(0) === \" \") {\r\n            //     let spaceIndex = arr[i].lastIndexOf(\" \");\r\n            //     arr[i] = arr[i].charAt(spaceIndex + 1).toUpperCase() + arr[i].slice(spaceIndex + 2);\r\n            // }\r\n            // else {\r\n            //     arr[i] = arr[i].charAt(0).toUpperCase() + arr[i].slice(1);\r\n            // }\r\n\r\n            // console.log(trimmedarr[i]);\r\n        }\r\n\r\n        // const finalStr = () => {\r\n        //     for (let j = 0; j < arr.length; j++) {\r\n\r\n        //         if (arr[j].charAt(0) === \" \") {\r\n        //             let chkspace = arr[j].lastIndexOf(\" \");\r\n        //             console.log(\" \".repeat(chkspace + 1) + arr[j].join(\".\"));\r\n        //         }\r\n        //         else {\r\n        //             console.log(arr.join(\".\"));\r\n        //         }\r\n        //     }\r\n        // }\r\n        // console.log(finalstr);\r\n        const finalStr = arr.join(\"\");\r\n        setText(finalStr);\r\n    }\r\n    const handleOnChange = (event) => {\r\n        setText(event.target.value);\r\n    }\r\n\r\n\r\n    const handleClearClick = () => {\r\n        let newText = \"\";\r\n        setText(newText);\r\n\r\n        props.showAlert(\"Text Cleared\", \"success\")\r\n\r\n    }\r\n\r\n    const handleCopy = () => {\r\n        var a = document.getElementById(\"myBox\");\r\n        a.select();\r\n        navigator.clipboard.writeText(a.value);\r\n\r\n        props.showAlert(\"Copied to Clipboard\", \"success\")\r\n    }\r\n\r\n    const handleExtraSpaces = () => {\r\n        let newText = text.split(/[ ]+/)\r\n        setText(newText.join(\" \"))\r\n        props.showAlert(\"Extra Spaces Removed\", \"success\")\r\n    }\r\n\r\n    const wordcheck = () => {\r\n        let wordArr = text.split(/[ ]+/);\r\n        if (wordArr[wordArr.length - 1].charAt(0) === '') {\r\n            return (wordArr.length - 1);\r\n        }\r\n        else {\r\n            return (wordArr.length);\r\n        }\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className=\"container\" style={{ color: props.mode === 'light' ? 'black' : 'white' }}>\r\n                <div className=\"mb-3\">\r\n                    <label htmlFor=\"myBox\" className=\"form-label\">{props.heading}</label>\r\n\r\n                    <textarea className=\"form-control\" placeholder='Enter Text Here' style={{\r\n                        backgroundColor: props.mode === 'light' ? 'white' : '#585e7e',\r\n                        color: props.mode === 'light' ? 'black' : 'white'\r\n                    }} value={text} /*onKeyUp={handleUpClick}*/ onChange={handleOnChange} id=\"myBox\" rows=\"6\"></textarea>\r\n                </div>\r\n                <button disabled={text.length===0}className=\"btn btn-primary my-2 mx-2\" onClick={handleUpClick}>Convert to Uppercase</button>\r\n                <button disabled={text.length===0}className=\"btn btn-primary my-2 mx-2\" onClick={handleLowClick}>Convert to Lowercase</button>\r\n                <button disabled={text.length===0}className=\"btn btn-primary my-2 mx-2\" onClick={handleClearClick}>Clear Text</button>\r\n                <button disabled={text.length===0}className=\"btn btn-primary my-2 mx-2\" onClick={handleSentClick}>Sentence Case</button>\r\n                <button disabled={text.length===0}className=\"btn btn-primary my-2 mx-2\" onClick={handleCopy}>Copy Text</button>\r\n                <button disabled={text.length===0}className=\"btn btn-primary my-2 mx-2\" onClick={handleExtraSpaces}>Remove Extra Spaces</button>\r\n            </div>\r\n            <div className=\"container my-3\" style={{ color: props.mode === 'light' ? 'black' : 'white' }}>\r\n                <h2>Your Paragraph Summary</h2>\r\n                <p>{wordcheck()} words and {text.length} characters</p>\r\n                <p>{wordcheck() * 0.008} minutes time required to read the Paragraph.</p>\r\n                <h3 style={{display : text.length===0?'none':''}}>Preview</h3>\r\n                <p style={{display : text.length===0?'none':''}}>{text.length > 0 ? text : 'Nothing to preview'}</p>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nTextForm.propsType = {\r\n    heading: PropTypes.string.isRequired\r\n}\r\n\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    return (\r\n        <div style={{height : '60px'}}>\r\n            {props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show d-flex align-items-center`} role=\"alert\">\r\n                <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"bi bi-check-circle-fill flex-shrink-0 me-2\" viewBox=\"0 0 16 16\" role=\"img\" aria-label=\"Success:\" style={{height: '25px'}}>\r\n                <path d=\"M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-3.97-3.03a.75.75 0 0 0-1.08.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-.01-1.05z\"/>\r\n                </svg>\r\n                <div>\r\n                    {props.alert.msg}\r\n                    {/* <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button> */}\r\n                </div>\r\n                </div>}\r\n            </div>\r\n    )\r\n}\r\n\r\nexport default Alert","import React from 'react'\r\n\r\nexport default function About(props) {\r\n\r\n  // const [myStyle, setMyStyle] = useState({\r\n  //   color: 'black',\r\n  //   backgroundColor: \"white\"\r\n  // })\r\n\r\n  // const [btnText, setBtnText] = useState(\"Enable Dark Mode\")\r\n\r\n  // const toggleDark = () => {\r\n  //   if (myStyle.color === 'white') {\r\n  //     setMyStyle({\r\n  //       color: 'black',\r\n  //       backgroundColor: \"white\"\r\n  //     })\r\n  //     setBtnText(\"Enable Dark Mode\")\r\n  //   }\r\n  //   else {\r\n  //     setMyStyle({\r\n  //       color: 'white',\r\n  //       backgroundColor: 'black'\r\n  //     })\r\n  //     setBtnText(\"Disable Dark Mode\")\r\n  //   }\r\n  // }\r\n\r\n  let myStyle = {\r\n    color : props.mode ==='dark'?'white':'black',\r\n    backgroundColor : props.mode ==='dark'?'black':'white'\r\n  }\r\n\r\n  return (\r\n    <div className=\"container my-3\">\r\n      <div className=\"accordion\" id=\"accordionExample\">\r\n        <div className=\"accordion-item\">\r\n          <h2 className=\"accordion-header\" id=\"headingOne\">\r\n            <button className=\"accordion-button\" type=\"button\" style={myStyle} data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n              Accordion Item #1\r\n            </button>\r\n          </h2>\r\n          <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\" style={myStyle}>\r\n            <div className=\"accordion-body\" style={myStyle}>\r\n              <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classNameNamees that we use to style each element. These classNameNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"accordion-item\" style={myStyle}>\r\n          <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n            <button className=\"accordion-button collapsed\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n              Accordion Item #2\r\n            </button>\r\n          </h2>\r\n          <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n            <div className=\"accordion-body\" style={myStyle}>\r\n              <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNameNamees that we use to style each element. These classNameNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"accordion-item\" style={myStyle}>\r\n          <h2 className=\"accordion-header\" id=\"headingThree\">\r\n            <button className=\"accordion-button collapsed\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n              Accordion Item #3\r\n            </button>\r\n          </h2>\r\n          <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n            <div className=\"accordion-body\" style={myStyle}>\r\n              <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNameNamees that we use to style each element. These classNameNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      {/* <div className=\"form-check form-switch my-3\">\r\n        <input className=\"form-check-input\" onChange={toggleDark} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\" />\r\n        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">{btnText}</label>\r\n      </div> */}\r\n    </div>\r\n  )\r\n}\r\n","\nimport React, { useState } from 'react';\nimport './App.css';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport Alert from './components/Alert'\nimport About from './components/About';\n// import About from './components/About.js'\nimport { Routes, Route } from \"react-router-dom\";\n\n\nfunction App() {\n\n  const [mode, setMode] = useState(\"light\"); // tells whether dark mode is enabled or not\n\n  const [btnText, setBtnText] = useState(\"Enable Dark Mode\")\n\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type\n    })\n\n    setTimeout(() => {\n      setAlert(null)\n    }, 1500);\n  }\n\n  const toggleDark = () => {\n    if (mode === 'dark') {\n      setMode('light')\n      setBtnText(\"Enable Dark Mode\")\n      document.body.style.backgroundColor = 'white';\n      showAlert('Light Mode enabled', 'success')\n\n    }\n    else {\n      setMode('dark')\n      setBtnText(\"Disable Dark Mode\")\n      document.body.style.backgroundColor = document.getElementById('modeColor').value;\n      showAlert('Dark Mode enabled', 'success')\n      if (btnText === 'Disable Dark Mode') {\n        document.getElementById('modeColor').value = '#ffffff';\n      }\n    }\n  }\n  return (\n    <>\n      <Navbar title=\"Text Utility\" aboutText=\"About Us\" mode={mode} toggleMode={toggleDark} buttonText={btnText} />\n      <Alert alert={alert} />\n      {/* <TextForm showAlert={showAlert} mode={mode} heading=\"Text Area\" />\n      <About mode={mode}/> */}\n\n      <Routes>\n        <Route path=\"/\" element={<TextForm showAlert={showAlert} mode={mode} heading=\"Text Area\" />} />\n        <Route path=\"about\" element={<About mode={mode} />} />\n      </Routes>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n// import * as ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <BrowserRouter>\n    <App />\n    </BrowserRouter>\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}