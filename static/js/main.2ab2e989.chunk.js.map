{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","_useState","useState","_useState2","Object","slicedToArray","colorMode","setColorMode","_useState3","_useState4","clrSelectorTxt","setClrSelectorTxt","react_default","a","createElement","className","concat","mode","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","style","display","color","htmlFor","value","onChange","event","target","toggleMode","document","getElementById","role","buttonText","TextForm","text","setText","wordcheck","wordArr","split","length","charAt","Fragment","heading","placeholder","backgroundColor","rows","onClick","newText","toUpperCase","showAlert","toLowerCase","arr","i","slice","console","log","finalStr","join","select","navigator","clipboard","writeText","propsType","PropTypes","string","isRequired","Alert","alert","xmlns","viewBox","height","d","msg","App","setMode","btnText","setBtnText","_useState5","_useState6","setAlert","message","setTimeout","aboutText","body","components_Alert","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode","dist","src_App"],"mappings":"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","file":"static/js/main.2ab2e989.chunk.js","sourcesContent":["import React, {useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from 'react-router-dom'\r\n\r\nexport default function Navbar(props) {\r\n  \r\n  const [colorMode, setColorMode] = useState(\"#000000\")\r\n\r\n  const [clrSelectorTxt, setClrSelectorTxt] = useState('black')\r\n\r\n  const colorpicker = () => {\r\n    if(props.mode === 'dark'){\r\n      setClrSelectorTxt('black')\r\n      document.getElementById('colorselector').style.display = 'flex'\r\n      setColorMode('#000000')\r\n    }\r\n    else{\r\n      // setClrSelectorTxt('white')\r\n      document.getElementById('colorselector').style.display = 'none'\r\n    }\r\n  }\r\n  const handleColor = (event) =>{\r\n    setColorMode(event.target.value);\r\n  }\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n      <div className=\"container-fluid\">\r\n        {/* <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link> */}\r\n        <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n        <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              {/* <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link> */}\r\n              <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n            </li>\r\n            {/* <li className=\"nav-item\">\r\n              <Link className=\"nav-link\" to=\"/about\">{props.aboutText}</Link>\r\n              <a className=\"nav-link\" href=\"/about\">{props.aboutText}</a>\r\n            </li> */}\r\n          </ul>\r\n          {/* <form className=\"d-flex\" role=\"search\">\r\n          <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n          <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n        </form> */}\r\n          <div className='mx-2' id='colorselector' style={{display:'flex'}}>\r\n            <label className=\"form-check-label mx-2\" style={{color : clrSelectorTxt}} htmlFor='DarkModeColor'>Select Dark mode Color</label>\r\n            <input type=\"color\" id=\"modeColor\" value={colorMode} onChange={handleColor} />\r\n            {/* <input type=\"button\" className=\"btn btn-primary\" value=\"Click\" /> */}\r\n          </div>\r\n          <div className={`form-check form-switch my-3 text-${props.mode === 'light' ? 'dark' : 'light'}`}>\r\n            <input className=\"form-check-input\" onChange={() =>{ props.toggleMode(); colorpicker(); }} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\" />\r\n            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">{props.buttonText}</label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  )\r\n}\r\n\r\n// Navbar.propTypes = {\r\n//     title : PropTypes.string,\r\n//     aboutText : PropTypes.string\r\n// }\r\n\r\n// Sets default values of props if nothing is passed\r\n// Navbar.defaultProps = {\r\n//     title : \"Title\",\r\n//     aboutText : \"About\"\r\n// }\r\n\r\n// Checks the value of props is not blank\r\nNavbar.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  aboutText: PropTypes.string.isRequired\r\n}\r\n","import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport default function TextForm(props) {\r\n\r\n\r\n    const [text, setText] = useState('');\r\n    // text = \"any text\"; We cannot assign text directly\r\n    // setText(\"any text\"); Correct way to set text\r\n\r\n\r\n\r\n\r\n    const handleUpClick = () => {\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to Uppercase\", \"success\")\r\n    }\r\n\r\n    const handleLowClick = () => {\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to Lowercase\", \"success\")\r\n    }\r\n\r\n    const handleSentClick = () => {\r\n        // let newText = text.lastIndexOf(\".\");\r\n        // console.log(newText);\r\n        const arr = text.split(\".\");\r\n        // console.log(arr);\r\n        // const trimmedarr = arr.map(element => {\r\n        //     return element.trim();\r\n        // });\r\n\r\n        // console.log(trimmedarr);\r\n\r\n        for (let i = 0; i < arr.length; i++) {\r\n            arr[i] = arr[i].charAt(0).toUpperCase() + arr[i].slice(1);\r\n            console.log(arr[i]);\r\n            // if (arr[i].charAt(0) === \" \") {\r\n            //     let spaceIndex = arr[i].lastIndexOf(\" \");\r\n            //     arr[i] = arr[i].charAt(spaceIndex + 1).toUpperCase() + arr[i].slice(spaceIndex + 2);\r\n            // }\r\n            // else {\r\n            //     arr[i] = arr[i].charAt(0).toUpperCase() + arr[i].slice(1);\r\n            // }\r\n\r\n            // console.log(trimmedarr[i]);\r\n        }\r\n\r\n        // const finalStr = () => {\r\n        //     for (let j = 0; j < arr.length; j++) {\r\n\r\n        //         if (arr[j].charAt(0) === \" \") {\r\n        //             let chkspace = arr[j].lastIndexOf(\" \");\r\n        //             console.log(\" \".repeat(chkspace + 1) + arr[j].join(\".\"));\r\n        //         }\r\n        //         else {\r\n        //             console.log(arr.join(\".\"));\r\n        //         }\r\n        //     }\r\n        // }\r\n        // console.log(finalstr);\r\n        const finalStr = arr.join(\"\");\r\n        setText(finalStr);\r\n    }\r\n    const handleOnChange = (event) => {\r\n        setText(event.target.value);\r\n    }\r\n\r\n\r\n    const handleClearClick = () => {\r\n        let newText = \"\";\r\n        setText(newText);\r\n\r\n        props.showAlert(\"Text Cleared\", \"success\")\r\n\r\n    }\r\n\r\n    const handleCopy = () => {\r\n        var a = document.getElementById(\"myBox\");\r\n        a.select();\r\n        navigator.clipboard.writeText(a.value);\r\n\r\n        props.showAlert(\"Copied to Clipboard\", \"success\")\r\n    }\r\n\r\n    const handleExtraSpaces = () => {\r\n        let newText = text.split(/[  ]+/)\r\n        setText(newText.join(\" \"))\r\n        props.showAlert(\"Extra Spaces Removed\", \"success\")\r\n    }\r\n\r\n    const wordcheck = () => {\r\n        let wordArr = text.split(/[ ]+/);\r\n        if (wordArr[wordArr.length - 1].charAt(0) === '') {\r\n            return (wordArr.length - 1);\r\n        }\r\n        else {\r\n            return (wordArr.length);\r\n        }\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className=\"container\" style={{ color: props.mode === 'light' ? 'black' : 'white' }}>\r\n                <div className=\"mb-3\">\r\n                    <label htmlFor=\"myBox\" className=\"form-label\">{props.heading}</label>\r\n\r\n                    <textarea className=\"form-control\" placeholder='Enter Text Here' style={{\r\n                        backgroundColor: props.mode === 'light' ? 'white' : '#585e7e',\r\n                        color: props.mode === 'light' ? 'black' : 'white'\r\n                    }} value={text} /*onKeyUp={handleUpClick}*/ onChange={handleOnChange} id=\"myBox\" rows=\"6\"></textarea>\r\n                </div>\r\n                <button className=\"btn btn-primary my-2 mx-2\" onClick={handleUpClick}>Convert to Uppercase</button>\r\n                <button className=\"btn btn-primary my-2 mx-2\" onClick={handleLowClick}>Convert to Lowercase</button>\r\n                <button className=\"btn btn-primary my-2 mx-2\" onClick={handleClearClick}>Clear Text</button>\r\n                <button className=\"btn btn-primary my-2 mx-2\" onClick={handleSentClick}>Sentence Case</button>\r\n                <button className=\"btn btn-primary my-2 mx-2\" onClick={handleCopy}>Copy Text</button>\r\n                <button className=\"btn btn-primary my-2 mx-2\" onClick={handleExtraSpaces}>Remove Extra Spaces</button>\r\n            </div>\r\n            <div className=\"container my-3\" style={{ color: props.mode === 'light' ? 'black' : 'white' }}>\r\n                <h2>Your Paragraph Summary</h2>\r\n                <p>{wordcheck()} words and {text.length} characters</p>\r\n                <p>{wordcheck() * 0.008} minutes time required to read the Paragraph.</p>\r\n                <h3>Preview</h3>\r\n                <p>{text.length > 0 ? text : 'Enter Something in textbox to preview here'}</p>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nTextForm.propsType = {\r\n    heading: PropTypes.string.isRequired\r\n}\r\n\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    return (\r\n            props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show d-flex align-items-center`} role=\"alert\">\r\n                <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"bi bi-check-circle-fill flex-shrink-0 me-2\" viewBox=\"0 0 16 16\" role=\"img\" aria-label=\"Success:\" style={{height: '25px'}}>\r\n                <path d=\"M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-3.97-3.03a.75.75 0 0 0-1.08.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-.01-1.05z\"/>\r\n                </svg>\r\n                <div>\r\n                    {props.alert.msg}\r\n                    {/* <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button> */}\r\n                </div>\r\n            </div>\r\n    )\r\n}\r\n\r\nexport default Alert","\nimport React, { useState } from 'react';\nimport './App.css';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport Alert from './components/Alert'\n// import About from './components/About.js'\n// import { Routes, Route, Link } from \"react-router-dom\";\n\n\nfunction App() {\n\n  const [mode, setMode] = useState(\"light\"); // tells whether dark mode is enabled or not\n\n  const [btnText, setBtnText] = useState(\"Enable Dark Mode\")\n\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type\n    })\n\n    setTimeout(() => {\n      setAlert(null)\n    }, 1500);\n  }\n\n  const toggleDark = () => {\n    if (mode === 'dark') {\n      setMode('light')\n      setBtnText(\"Enable Dark Mode\")\n      document.body.style.backgroundColor = 'white';\n      showAlert('Light Mode enabled', 'success')\n\n    }\n    else {\n      setMode('dark')\n      setBtnText(\"Disable Dark Mode\")\n      document.body.style.backgroundColor = document.getElementById('modeColor').value;\n      showAlert('Dark Mode enabled', 'success')\n      if (btnText === 'Disable Dark Mode') {\n        document.getElementById('modeColor').value = '#ffffff';\n      }\n    }\n  }\n  return (\n    <>\n      <Navbar title=\"Text Utility\" aboutText=\"About Us\" mode={mode} toggleMode={toggleDark} buttonText={btnText} />\n      <Alert alert={alert} />\n\n      {/* <Routes> */}\n        {/* <Route path=\"/\" element={<TextForm showAlert={showAlert} mode={mode} heading=\"Text Area\" />} /> */}\n        <TextForm showAlert={showAlert} mode={mode} heading=\"Text Area\" />\n        {/* <Route path=\"about\" element={<About />} /> */}\n      {/* </Routes> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n// import * as ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <BrowserRouter>\n    <App />\n    </BrowserRouter>\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}